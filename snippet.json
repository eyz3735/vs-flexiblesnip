{
  "java": {
    "class": "public class $1 {\n\t$2\n}",
    "method": "public $1 $2($3) {\n\t$4\n}",
    "if": "if ($1) {\n\t$2\n}",
    "for": "for (int $1 = $2; $1 < $3; $1++) {\n\t$4\n}",
    "while": "while ($1) {\n\t$2\n}",
    "tryCatch": "try {\n\t$1\n} catch ($2 e) {\n\t$3\n}",
    "switch": "switch ($1) {\n\tcase $2:\n\t\t$3\n\t\tbreak;\n\tdefault:\n\t\t$4\n}",
    "import": "import $1;\n",
    "package": "package $1;\n",
    "new": "new $1($2);",
    "sysout": "System.out.println($1);",
    "main": "public static void main(String[] args) {\n\t$1\n}",
    "annotation": "@$1\n",
    "getter": "public $1 get$2() {\n\treturn $3;\n}",
    "setter": "public void set$1($2 $3) {\n\tthis.$4 = $5;\n}",
    "array": "$1[] $2 = new $1[$3];",
    "list": "List<$1> $2 = new ArrayList<>();",
    "map": "Map<$1, $2> $3 = new HashMap<>();",
    "set": "Set<$1> $2 = new HashSet<>();",
    "lambda": "($1) -> {\n\t$2\n}",
    "stream": "$1.stream().$2($3).$4($5);",
    "exception": "throw new $1($2);",
    "comment": "// $1",
    "blockComment": "/* $1 */",
    "docComment": "/**\n * $1\n */",
    "enum": "public enum $1 {\n\t$2\n}",
    "interface": "public interface $1 {\n\t$2\n}",
    "abstractClass": "public abstract class $1 {\n\t$2\n}",
    "finalClass": "public final class $1 {\n\t$2\n}",
    "staticMethod": "public static $1 $2($3) {\n\t$4\n}",
    "synchronizedMethod": "public synchronized $1 $2($3) {\n\t$4\n}",
    "slf4j": "import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n",
    "slf4jLogger": "private static final Logger logger = LoggerFactory.getLogger($1.class);",
    "slf4jInfo": "logger.info($1);",
    "slf4jDebug": "logger.debug($1);",
    "slf4jError": "logger.error($1, $2);",
    "slf4jWarn": "logger.warn($1);",
    "nowTime": "LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));",
    "dateFormat": "new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date());",
    "springBootApplication": "@SpringBootApplication\npublic class $1 {\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run($1.class, args);\n\t}\n}",
    "regexNumeric": "[0-9]",
    "regexAlpha": "[a-zA-Z]",
    "regexAlphanumeric": "[a-zA-Z0-9]",
    "regexEmail": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
    "regexUrl": "^(https?|ftp)://[^\\s/$.?#].[^\\s]*$",
    "regexPhone": "^\\+?[0-9]{1,3}?[-.\\s]?\\(?[0-9]{1,4}?\\)?[-.\\s]?[0-9]{1,4}[-.\\s]?[0-9]{1,4}[-.\\s]?[0-9]{1,9}$",
    "regexIp": "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
    "regexHex": "^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$",
    "regexUuid": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
    "regexDate": "^(\\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$",
    "regexTime": "^(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$"
  },
  "txt": {
    "arrow": "-->",
    "hashline": "#########################",
    "sharpline": "-------------------------",
    "equaline": "=========================",
    "path": "path/to/file",
    "url": "https://example.com",
    "email": "test@test.com",
    "time": "1970-01-01 00:00:00",
    "date": "1970-01-01",
    "css": "CSS IS AWESOME.",
    "vim": "VIM Let Me Ouuuuuuut!!!",
    "local": "https://127.0.0.1:8080",
    "list": "1. $1\n2. $2\n3. $3",
    "titles": "------ $1 ------\n",
    "blockTitle": "----------------\n $1\n----------------\n"
  },
  "js": {
    "log": "console.log($1);"
  },
  "c": {
    "include": "#include <$1>",
    "define": "#define $1 $2",
    "main": "int main() {\n\t$1\n\treturn 0;\n}",
    "printf": "printf(\"$1\\n\");",
    "if": "if ($1) {\n\t$2\n}",
    "for": "for (int $1 = $2; $1 < $3; $1++) {\n\t$4\n}",
    "while": "while ($1) {\n\t$2\n}",
    "switch": "switch ($1) {\n\tcase $2:\n\t\t$3\n\t\tbreak;\n\tdefault:\n\t\t$4\n}",
    "function": "$1 $2($3) {\n\t$4\n}",
    "struct": "struct $1 {\n\t$2\n};",
    "comment": "// $1",
    "blockComment": "/* $1 */"
  },
  "cpp": {
    "include": "#include <$1>",
    "iostream": "#include <iostream>",
    "vector": "#include <vector>",
    "map": "#include <map>",
    "set": "#include <set>",
    "define": "#define $1 $2",
    "main": "int main() {\n\t$1\n\treturn 0;\n}",
    "cout": "std::cout << \"$1\" << std::endl;",
    "if": "if ($1) {\n\t$2\n}",
    "for": "for (int $1 = $2; $1 < $3; $1++) {\n\t$4\n}",
    "while": "while ($1) {\n\t$2\n}",
    "switch": "switch ($1) {\n\tcase $2:\n\t\t$3\n\t\tbreak;\n\tdefault:\n\t\t$4\n}",
    "function": "$1 $2($3) {\n\t$4\n}",
    "class": "class $1 {\npublic:\n\t$2\n};",
    "namespace": "namespace $1 {\n\t$2\n}",
    "comment": "// $1",
    "blockComment": "/* $1 */"
  },
  "md": {
    "b": "**$1**",
    "i": "*$1*",
    "s": "~~$1~~",
    "line": "***",
    "font": "<font color=\"$1\">$2</font>",
    "rgb": "rgb($1, $2, $3)",
    "code": "`$1`",
    "arrow": "-->",
    "javaBlock": "```java\n$1\n```",
    "pythonBlock": "```python\n$1\n```",
    "codeBlock": "```c\n$1\n```",
    "mermaidBlock": "```mermaid\n$1\n```",
    "shellBlock": "```shell\n$1\n```",
    "mathBlock": "```math\n$1\n```",
    "htmlBlock": "```html\n$1\n```",
    "yamlBlock": "```yaml\n$1\n```",
    "jsonBlock": "```json\n$1\n```",
    "diffBlock": "```diff\n- $1\n+ $2\n```",
    "sqlBlock": "```sql\n$1\n```",
    "quote": "> $1\n",
    "quoteBlock": "> $1\n> $2\n",
    "link": "https://example.com",
    "titledLink": "[Title](https://example.com)",
    "details": "<details open>\n<summary>$1</summary>\n\n$2\n</details>",
    "table": "| Header 1 | Header 2 | Header 3 |\n|:--------:|:--------:|:--------:|\n| $1 | $2 | $3 |\n",
    "taskList": "- [ ] $1",
    "taskListChecked": "- [x] $1",
    "lists": "- $1\n- $2\n- $3",
    "nestedList": "  - $1\n    - $2\n      - $3",
    "stackoverflow": "[StackOverflow](https://stackoverflow.com)",
    "github": "[GitHub](https://github.com)",
    "reddit": "[Reddit](https://reddit.com)",
    "twitter": "[Twitter](https://twitter.com)",
    "youtube": "[YouTube](https://youtube.com)",
    "instagram": "[Instagram](https://instagram.com)",
    "facebook": "[Facebook](https://facebook.com)",
    "linkedin": "[LinkedIn](https://linkedin.com)",
    "pinterest": "[Pinterest](https://pinterest.com)",
    "tiktok": "[TikTok](https://tiktok.com)",
    "discord": "[Discord](https://discord.com)",
    "whatsapp": "[WhatsApp](https://whatsapp.com)",
    "telegram": "[Telegram](https://telegram.org)",
    "slack": "[Slack](https://slack.com)",
    "google": "[Google](https://google.com)",
    "bing": "[Bing](https://bing.com)",
    "yahoo": "[Yahoo](https://yahoo.com)",
    "wikipedia": "[Wikipedia](https://wikipedia.org)"
  },
  "yaml": {
    "keyValue": "$1: $2",
    "listItem": "- $1",
    "nestedList": "  - $1",
    "comment": "# $1",
    "blockComment": "# $1\n# $2",
    "map": "$1:\n  $2: $3\n  $4: $5",
    "sequence": "- $1\n- $2\n- $3",
    "anchor": "&$1\n$2: *$1"
  },
  "json": {
    "object": "{\n\t\"$1\": \"$2\",\n\t\"$3\": \"$4\"\n}",
    "array": "[\n\t\"$1\",\n\t\"$2\"\n]",
    "keyValue": "\"$1\": \"$2\"",
    "comment": "// $1",
    "blockComment": "/* $1 */"
  },
  "sql": {
    "select": "SELECT $1 FROM $2 WHERE $3;",
    "insert": "INSERT INTO $1 ($2) VALUES ($3);",
    "update": "UPDATE $1 SET $2 WHERE $3;",
    "delete": "DELETE FROM $1 WHERE $2;",
    "createTable": "CREATE TABLE $1 (\n\t$2\n);",
    "dropTable": "DROP TABLE IF EXISTS $1;",
    "alterTable": "ALTER TABLE $1 ADD COLUMN $2;",
    "join": "SELECT $1 FROM $2 JOIN $3 ON $4;",
    "where": "WHERE $1 = '$2'",
    "orderBy": "ORDER BY $1 DESC",
    "groupBy": "GROUP BY $1",
    "having": "HAVING COUNT($1) > 0"
  },
  "sh": {
    "echo": "echo \"$1\"",
    "if": "if [ $1 ]; then\n\t$2\nfi",
    "for": "for i in $1; do\n\t$2\ndone",
    "while": "while [ $1 ]; do\n\t$2\ndone",
    "function": "$1() {\n\t$2\n}",
    "export": "export $1=$2",
    "alias": "alias $1='$2'",
    "comment": "# $1",
    "blockComment": ": <<'END'\n$1\nEND"
  },
  "py": {
    "import": "import $1\n",
    "fromImport": "from $1 import $2\n",
    "class": "class $1:\n\tdef __init__(self, $2):\n\t\t$3",
    "function": "def $1($2):\n\t$3",
    "if": "if $1:\n\t$2",
    "for": "for $1 in $2:\n\t$3",
    "while": "while $1:\n\t$2",
    "tryExcept": "try:\n\t$1\nexcept $2 as e:\n\t$3",
    "lambda": "$1 = lambda $2: $3",
    "listComp": "$1 = [$2 for $3 in $4 if $5]",
    "dictComp": "$1 = {$2: $3 for $4 in $5}",
    "setComp": "$1 = {x for x in $2 if $3}",
    "comment": "# $1",
    "blockComment": "\"\"\"\n$1\n\"\"\"",
    "main": "if __name__ == '__main__':\n\t$1",
    "print": "print($1)",
    "assert": "assert $1, \"$2\""
  },
  "ts": {
    "log": "console.log($1);",
    "function": "function $1($2): $3 {\n\t$4\n}",
    "arrowFunction": "const $1 = ($2): $3 => {\n\t$4\n}",
    "if": "if ($1) {\n\t$2\n}",
    "for": "for (let $1 = $2; $1 < $3; $1++) {\n\t$4\n}",
    "while": "while ($1) {\n\t$2\n}",
    "tryCatch": "try {\n\t$1\n} catch (e) {\n\t$2\n}",
    "import": "import { $1 } from '$2';\n",
    "export": "export { $1 };\n",
    "class": "class $1 {\n\tconstructor($2) {\n\t\t$3\n\t}\n}",
    "interface": "interface $1 {\n\t$2;\n}",
    "typeAlias": "type $1 = $2;",
    "enum": "enum $1 {\n\t$2,\n}",
    "comment": "// $1",
    "blockComment": "/**\n * $1\n */"
  },
  "rb": {
    "puts": "puts \"$1\"",
    "def": "def $1($2)\n\t$3\nend",
    "if": "if $1\n\t$2\nend",
    "for": "for $1 in $2 do\n\t$3\nend",
    "while": "while $1 do\n\t$2\nend",
    "beginRescue": "begin\n\t$1\nrescue $2 => e\n\t$3\nend",
    "require": "require '$1'",
    "class": "class $1\n\tdef initialize($2)\n\t\t$3\n\tend\nend",
    "module": "module $1\n\t$2\nend",
    "lambda": "$1 = ->($2) { $3 }",
    "comment": "# $1",
    "blockComment": "=begin\n$1\n=end"
  },
  "go": {
    "package": "package $1\n",
    "import": "import \"$1\"\n",
    "func": "func $1($2) $3 {\n\t$4\n}",
    "if": "if $1 {\n\t$2\n}",
    "for": "for $1 := $2; $1 < $3; $1++ {\n\t$4\n}",
    "while": "for $1 {\n\t$2\n}",
    "switch": "switch $1 {\n\tcase $2:\n\t\t$3\n\tdefault:\n\t\t$4\n}",
    "struct": "type $1 struct {\n\t$2\n}",
    "interface": "type $1 interface {\n\t$2\n}",
    "comment": "// $1",
    "blockComment": "/* $1 */"
  },
  "php": {
    "echo": "echo \"$1\";",
    "function": "function $1($2) {\n\t$3\n}",
    "if": "if ($1) {\n\t$2\n}",
    "for": "for ($1 = $2; $1 < $3; $1++) {\n\t$4\n}",
    "while": "while ($1) {\n\t$2\n}",
    "tryCatch": "try {\n\t$1\n} catch ($2 $3) {\n\t$4\n}",
    "class": "class $1 {\n\tpublic function __construct($2) {\n\t\t$3\n\t}\n}",
    "namespace": "namespace $1;\n"
  },
  "cs": {
    "using": "using System;\nusing System.Collections.Generic;\n",
    "namespace": "namespace $1 {\n\t$2\n}",
    "class": "public class $1 {\n\t$2\n}",
    "method": "public $1 $2($3) {\n\t$4\n}",
    "if": "if ($1) {\n\t$2\n}",
    "for": "for (int $1 = $2; $1 < $3; $1++) {\n\t$4\n}",
    "while": "while ($1) {\n\t$2\n}",
    "tryCatch": "try {\n\t$1\n} catch ($2 e) {\n\t$3\n}",
    "switch": "switch ($1) {\n\tcase $2:\n\t\t$3\n\t\tbreak;\n\tdefault:\n\t\t$4\n}",
    "import": "using $1;\n",
    "new": "new $1($2);",
    "sysout": "Console.WriteLine($1);",
    "main": "public static void Main(string[] args) {\n\t$1\n}",
    "annotation": "[AttributeUsage(AttributeTargets.Class)]\npublic class $1 : Attribute {\n\t$2\n}",
    "getter": "public $1 Get$2() {\n\treturn $3;\n}",
    "setter": "public void Set$1($2 $3) {\n\tthis.$4 = $5;\n}",
    "array": "$1[] $2 = new $1[$3];",
    "list": "List<$1> $2 = new List<$1>();",
    "map": "Dictionary<$1, $2> $3 = new Dictionary<$1, $2>();",
    "set": "HashSet<$1> $2 = new HashSet<$1>();",
    "lambda": "Func<$1, $2> $3 = ($4) => {\n\t$5\n};",
    "stream": "$1.Select(x => x.$2).Where(x => x.$3).ToList();",
    "exception": "throw new $1($2);"
  },
  "gradle": {
    "applyPlugin": "apply plugin: '$1'",
    "repositories": "repositories {\n\t$1\n}",
    "dependencies": "dependencies {\n\t$1\n}",
    "task": "task $1 {\n\t$2\n}",
    "group": "group = '$1'\n",
    "version": "version = '$1'\n",
    "sourceCompatibility": "sourceCompatibility = '$1'\n",
    "targetCompatibility": "targetCompatibility = '$1'\n",
    "jar": "jar {\n\tbaseName = '$1'\n}",
    "testTask": "test {\n\tuseJUnitPlatform()\n}",
    "implementation": "implementation '$1'",
    "testImplementation": "testImplementation '$1'"
  },
  "properties": {
    "keyValue": "$1=$2",
    "comment": "# $1",
    "blockComment": "# $1\n# $2",
    "nestedKeyValue": "$1.$2=$3"
  },
  "xml": {
    "declaration": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n",
    "rootElement": "<$1>\n\t$2\n</$1>",
    "element": "<$1>$2</$1>",
    "attribute": "<$1 $2=\"$3\">$4</$1>",
    "comment": "<!-- $1 -->",
    "cdata": "<![CDATA[$1]]>",
    "processingInstruction": "<?$1 $2?>",
    "doctype": "<!DOCTYPE $1>\n"
  }
}